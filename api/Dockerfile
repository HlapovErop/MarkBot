# Dockerfile - это файл, который описывает, как мы собираем наш проект в образ.
# Фактически это рецепт одного блюда (одного контейнера), и если у вас капец сложная система, то файлов может быть несколько.
# На некоторые блюда (например вареное яйцо), рецепт вообще не нужен, а значит не нужен и Dockerfile. Пример тому БД - все и так знают, как его варить


# FROM говорит, какой мы образ используем в качестве фундамента, в данном слечае официальный от golang с определенной версией.
# Образов пруд пруди, найти их не составляет сложности,
# тем более собранных докерфайлов на все случаи жизни можно найти с примерами проектов.
# Можете на это смотреть, как на установку гошки на виртуальную машину
FROM golang:1.23.4 AS base

# WORKDIR говорит, где мы будем работать, т.е. в какой папке у нас будет точка отсчета
# В данном случае мы работаем в папке /usr/src/api
# Почему эта папка? Контейнеры работают на базе линукс, где в /usr/src находятся исходные тексты программ,
# установленных в системе. api/ - уже кастомная папка, в которой мы будем хранить наши файлы
# (не забывайте, что это все внутри докера, физически на компе храните свой проект где душе угодно)
WORKDIR /usr/src/api

# COPY говорит, какие файлы из проекта или нашего компьютера нужно перенести в контейнер (тк изначально он пустой). Первая точка означает, что мы копируем эту директорию на компютере (где проект и все дела). Вторая точка - куда, в нашем случае в рабочую директорию контейнера - /usr/src/api
COPY . /usr/src/api

# RUN говорит, что мы будем выполнять команду(после RUN идет bash команда, которую хотите заюзать).
# В данном случае установка air - это гошная приколюха, которая позволяет рекомпилировать проект в рантайме.
# Не нужно ребилдить докер, чтобы увидеть изменения (подробнее читай про live-reloading и не путай с hot-reloading)
# Здесь в RUN команда для подтягивания зависимостей гошного проекта
RUN go mod tidy

# Development stage with air for hot-reloading
FROM base AS development
RUN go install github.com/air-verse/air@latest
CMD ["air", "-c", ".air.toml"]

# Production stage with compiled binary
FROM base AS production
# Build the application
RUN CGO_ENABLED=0 GOOS=linux go build -o app ./src/cmd/main.go
# Run the compiled binary directly
CMD ["./app"]
