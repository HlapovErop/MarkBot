version: '3.8'

services:
  api-markbot:
    build: . # здесь мы говорим, где берем рецепт для нашего web контейнера. Тк это находится в той же папке, что и docker-compose.yml, то можно просто указать точку. Но некоторые крутые пишут параметры context:... и dockerfile:..., если место и имя файла отличается
    env_file:
      - .env
    ports:
      - "3000:3000"
    volumes: # называется томами, нужны для синхронизации данных контейнера и хоста(нашего компьютера). Вообще используются овер где и как, они очень полезны, вот один яркий пример: внутри контейнера будут писаться логи, но без указания тома они там и останутся. Чтобы их увидеть, тебе придется зайти внутрь контейнера и посмотреть там - изменения не будут отображаться в IDE и файле логов вне контейнера, а с его удалением и вовсе пропадут. Том показывает, куда нужно сохранять изменения, которые принес в файлы, на наш хост. И куда смотреть, чтобы синхронизировать изменения на хосте со своими. К примеру если внесешь изменения в файл, контейнер их сразу увидит и скопирует к себе. Простыми словами - синхронизация
      - .:/usr/src/app # в данном случае используется анонимный том, т.е. без имени. Первым параметром перед ":" указывается папка хоста, вторым - папка контейнера. В данном случае - все файлы из текущей папки будут копироваться в папку /usr/src/app в контейнере
    command: air # без air она бы выглядела так: go run cmd/main.go -b 0.0.0.0 (также команду можно указать прямо в Dockerfile через CMD ...)
  db:
    image: postgres:alpine # фактически эта та же штучка, что и FROM в Dockerfile, но тк на не нужны никакие доп действия, целый Dockerfile создавать нет смысла (вареное яйцо)
    ports:
      - "5432:5432"
    volumes:
      - postgres-db-markbot:/var/lib/postgresql/data # тут уже используется именованный том. postgres-db-markbot - это имя тома, а /var/lib/postgresql/data - путь внутри контейнера (кто не знал, данные БД хранятся в файликах, где ж еще SQLite на максималках)

volumes: # А вот тут регистрируем наш именной том. Он тоже хранится, но где - за это отвечает сам докер, например в /var/lib/docker/volumes. Именованные тома можно синхронизировать сразу между несколькими проектами и контейнерами, если хост один и тот же. Напрмер при подключении другого проекта можете указать postgres-db-markbot, и он будет видеть бд этого проекта
  postgres-db-markbot: