version: '3.8'

services:
  # Database service - name "db" matches DB_HOST in .env
  db:
    image: postgres:14-alpine # фактически эта та же штучка, что и FROM в Dockerfile, но тк на не нужны никакие доп действия, целый Dockerfile создавать нет смысла (вареное яйцо)
    container_name: ${DB_HOST:-db}
    ports:
      - "5432:5432"
    environment: # Возьмет из .env. Куда и что с ними делать - сам разберется
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres-db-markbot:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis service - name "redis" matches REDIS_HOST in .env
  redis:
    image: redis:7-alpine
    container_name: ${REDIS_HOST:-redis}
    ports:
      - '6379:6379'
    volumes:
      - redis-db-markbot:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Development service with hot-reloading
  api-markbot-dev:
    build:
      context: ./api
      target: development # Целевая стадия из Dockerfile - разработка с hot-reloading
    container_name: markbot-api-dev
    env_file:
      - .env
    environment:
      - DB_HOST=${DB_HOST:-db}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - REDIS_HOST=${REDIS_HOST:-redis}
    ports:
      - "3000:3000"
    volumes: # называется томами, нужны для синхронизации данных контейнера и хоста(нашего компьютера).
      - ./api:/usr/src/api # синхронизация файлов проекта для hot-reloading
      - api-go-mod-cache:/go/pkg/mod  # кэш зависимостей Go
    depends_on: # указываем, что контейнер api-markbot зависит от других.
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - dev
      - all

  # Production service with compiled binary
  api-markbot-prod:
    build:
      context: ./api
      target: production # Целевая стадия из Dockerfile - production с скомпилированным бинарником
    container_name: markbot-api-prod
    env_file:
      - .env
    environment:
      - DB_HOST=${DB_HOST:-db}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - REDIS_HOST=${REDIS_HOST:-redis}
    ports:
      - "3000:3000"
    volumes:
      - ./log:/usr/src/api/log # только логи из продакшена
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - prod
      - all

volumes: # регистрируем именованные тома
  postgres-db-markbot:
    name: markbot-postgres-data
  redis-db-markbot:
    name: markbot-redis-data
  api-go-mod-cache:
    name: markbot-go-mod-cache
