package main

import "github.com/gofiber/fiber/v2"

// Точка входа в проект. Именно с этого файла стоит начать читать, чтобы сложилась полная картина
// В одном проекте может быть несколько точек входа, например одна для веб-сервера, а другая для крон-задач (крон-задачи - функции, исполняемые по расписанию и не привязанные к веб-проекту, например рассылки на почту или таймеры, подробнее читай про фоновые задачи)
// Все точки входа обычно находятся в cmd/, дальше делятся на отдельные пакеты, например cmd/api и cmd/cron, внутри которых один единственный файл по типу main.go
// Но не забываем, что это гошка, а не Ruby, Java или PHP со своими закостенелыми фреймворками, где есть четкие инструкции оформления и привязка к исполняемым директориям
// Из-за своей простоты гошка позволяет играть в креатив, и все, что будет рабочее, читаемое и документированное, можно считать нормальным проектом
func main() {
	app := fiber.New()

	// Здесь мы регистрируем маршруты (роутинг).

	// В гошке, если у вас совсем простой проект, можно использовать анонимные функции, как в этом хэндлере
	app.Get("/", func(c *fiber.Ctx) error {
		return c.SendString("Project has been launched. Well done")
	})

	app.Listen(":3000")
}
